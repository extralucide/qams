<?phpAtomik::disableLayout();Atomik::setView("export/export_validation_matrix");require_once "../excel/Classes/PHPExcel.php";require_once '../excel/Classes/PHPExcel/IOFactory.php';require_once '../excel/Classes/PHPExcel/Worksheet/RowIterator.php';Atomik::needed("ExportXls.class");include("app/includes/ExportXls.class.php");Atomik::needed('Tool.class');Atomik::needed("User.class");$postArray = &$_POST;// var_dump($_POST);// var_dump($_FILES);if (isset($postArray['project_id'])) {	Atomik::set('session/project_id',$postArray['project_id']);}if (isset($postArray['sub_project_id'])){	Atomik::set('session/sub_project_id',$postArray['sub_project_id']);}if (isset($postArray['type_id'])) {	Atomik::set('session/type_id',$postArray['type_id']);	}$project_id = Atomik::has('session/current_project_id')?Atomik::get('session/current_project_id'):Atomik::get('session/project_id');$sub_project_id = Atomik::has('session/sub_project_id')?Atomik::get('session/sub_project_id'):"";$type_id = Atomik::has('session/type_id')?Atomik::get('session/type_id'):"";/** display*/function display($objPHPExcel,				$data,				$line,				&$style){	// global $style_white_line_prr;	// require_once("app/includes/ExportXls.class.php");					// Atomik::needed("ExportXls.class");				if ($line % 2) {		/* alternate white and grey line color */		$objPHPExcel->getActiveSheet()->getStyle('A'.$line.':S'.$line)->applyFromArray($style);	}	/* Upper Req */	Tool::clean_author_response(&$data['upper']);	$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(0,$line,$data['upper']);	/* Id */	// $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(2,$line,"Req_".$row_counter);		/* Req */					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(2,$line,$data['req']);	/* Body */	if (isset($data['body'])){		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(3,$line,$data['body']);	}	/* Justification */	if (isset($data['justification'])){		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(4,$line,$data['justification']);	}	/* Allocation */	$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(5,$line,$data['alloc']);	/* Copy OK/KO */	$index = 7;	$value = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow(7,9)->getValue();	$conditionalStyles = $objPHPExcel->getActiveSheet()->getStyle('H9')->getConditionalStyles();		do		/* text */		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$line,$value);		/* conditionnal color */		// $objPHPExcel->getActiveSheet()->getStyleByColumnAndRow($index++,$line)->setConditionalStyles($conditionalStyles);	while ($index<15);	/* 15 = Mean */	/* 16 = Action */	/* 17 = Status */	/* 18 = Comments */	$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(19,$line,$data['issue']);}/** Begin*/$today_date = date("d").' '.date("F").' '.date("Y");if (isset($_FILES['filename'])){	$maxSize=30000000;                            // Only save files smaller than 30M	$uploadSize = $_FILES['filename']['size'];  // The size of our uploaded file	$uploadType = $_FILES['filename']['type'];  // The type of the file.	$uploadName = getcwd().DIRECTORY_SEPARATOR.'uploadedFile.dat'; // Never trust the upload, make your own name	echo $uploadName."<br/>";	$filename = basename( $_FILES['filename']['name']);	if ($uploadSize<$maxSize) {              // Make sure the file size isn't too big.	   move_uploaded_file($_FILES['filename']['tmp_name'], $uploadName);   // save file.	   echo "File $filename has been treated<br/>";	   echo "It was $uploadSize bytes of type $uploadType <br/><br/>"; 	}}else if (isset($_GET['file_id'])){	$project_id = $_GET['project_id'];	$sub_project_id = $_GET['sub_project_id'];	$type_id = $_GET['type_id'];	$ext = $_GET['ext'];	$data_link = "docs".DIRECTORY_SEPARATOR.$_GET['file_id'].".".$ext;	$uploadName=realpath(dirname(__FILE__)).DIRECTORY_SEPARATOR.							"..".DIRECTORY_SEPARATOR.								"..".DIRECTORY_SEPARATOR.							"..".DIRECTORY_SEPARATOR.							"..".DIRECTORY_SEPARATOR.							$data_link;	$uploadType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";}	else{	echo "no filename";	var_dump($_FILES);	exit();}if (($type_id == 340)||($type_id == 970)) { /* HPR or EPR */		$today_date = date("d").' '.date("F").' '.date("Y");		$file_template = dirname(__FILE__).							DIRECTORY_SEPARATOR."..".							DIRECTORY_SEPARATOR."..".							DIRECTORY_SEPARATOR."..".							DIRECTORY_SEPARATOR."assets".							DIRECTORY_SEPARATOR."template".							DIRECTORY_SEPARATOR."hpr_template.xlsx";				$row_counter = 7;				//require_once "../phpuploader/include_phpuploader.php";		   		//Gets the GUID of the file based on uploader name   		//$fileguid=@$_POST["myuploader"];		//$guidarray=explode("/",$_POST["myuploader"]);     		//get the uploaded file based on GUID   		//$uploader=new PhpUploader();		$count=0;   	  /*   	   * Generation excel   	   */  		error_reporting(E_ALL);		$cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;		PHPExcel_Settings::setCacheStorageMethod($cacheMethod);				if (!file_exists($file_template)) {			echo $file_template;			exit("HPR template is missing.\n");		}				$objPHPExcel = PHPExcel_IOFactory::load($file_template);						$objPHPExcel->setActiveSheetIndex(0);		$styleArray = array(			'font' => array(				'bold' => true,			),			'alignment' => array(				'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,				'vertical' => PHPExcel_Style_Alignment::VERTICAL_TOP,			),			'borders' => array(				'top' => array(					'style' => PHPExcel_Style_Border::BORDER_THIN,				),			),			'fill' => array(				'type' => PHPExcel_Style_Fill::FILL_GRADIENT_LINEAR,				'rotation' => 90,				'startcolor' => array(					'argb' => 'FFA0A0A0',				),				'endcolor' => array(					'argb' => 'FFFFFFFF',				),			),		);		$title = "";		$reference ="";		$username = "";		$objPHPExcel->getActiveSheet()->setCellValue('C8', $title);		$objPHPExcel->getActiveSheet()->setCellValue('C9', $reference);				/* date of reading */		$objPHPExcel->getActiveSheet()->setCellValue('D17', $today_date);		/* name of the reader */		$objPHPExcel->getActiveSheet()->setCellValue('F17', $username);				$objPHPExcel->getProperties()->setCreator($username)									 ->setLastModifiedBy($username)									 ->setTitle("HPR")									 ->setSubject("Ref:".$reference)									 ->setDescription("HPR Synthesis")									 ->setKeywords("HPR")									 ->setCategory("HPR tracking");		$row_counter = 26;		$index = 0;		$header_fields = array("Project","Ref","Issue", "Type", "Severity", "Status","Synopsis" ,"Author","Department","Date raised","HW Part Number","Checksum","Following","Description","Linked HPR","Analysis","Implementation","Date Visa","Date Closed","Assign","EPR Follow-up","Amendment");		foreach ($header_fields as $field_name){			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $field_name);		}			$row_counter = 27;		$hpr_header = Tool::read_openxml_header($uploadName,"preview-header.xslt");		$hpr_content_table = Tool::read_openxml($uploadName,"preview-hpr-table.xslt");		  $full_content = explode("Node 005A2BBD00285EC5005A2BBD;",$hpr_content_table);		  //print_r($hpr_content);		  foreach ($full_content as $sub_content) {			/* Replace NODE by carriage return */			$content_inter = preg_replace("/(Node \w{1,32};)(.*);/","$2\n",$sub_content);			/* Remove FORMTEXT */			$content[] = preg_replace("/(FORMTEXT)/s","",$content_inter);		  }			  //$index=1;		  foreach ($content as $text){		    //echo "TABLEAU ".$index++."<br/><br/><br/>";			$text = preg_replace("/(Node \w{1,32};)(.*)/","$2\n",$text);			$text = preg_replace("/(FORMCHECKBOX );?/s","",$text);			$text = preg_replace("/(Checkbox:1:)/s","<b>Check</b>",$text);			//$text = preg_replace("/(Checkbox:0:)/s","",$text);			echo $text;		  }		  //preg_match_all("#(.*);#U",$hpr_content_table,$body_content); 		  //$synopsis = preg_replace("/(FORMTEXT)/s","",$body_content[1][3]);		  //echo "<h2>Synopsis</h2>".$synopsis."<br/>";		  		  /*		   * Search for tech_description		   */ 		  //$index=Tool::getStringIndex("/(Technical Fact Description:)/Us",&$content);  	 		  //$tab7 = explode("Linked", $content[$index]);		  //preg_match("#Technical Fact Description:(.+)()*#s",$tab7[0],$array_tech_description);		  //$tech_description = str_replace(";","",$array_tech_description[1]);		  //echo "<h2>Technical Fact Description</h2>".$tech_description."<br/>";		  		  unset($content);		$hpr_content = Tool::read_openxml($uploadName,"preview-hpr.xslt");      try  {        /*       * Display HPR Header       */      preg_match("/PROJECT: (.+)[H|E]PR/Us",$hpr_header,$array_project);  	        preg_match("/Reference: (.+)Issue/Us",$hpr_header,$array_reference);       preg_match("/Issue:(.+)Page/Us",$hpr_header,$array_issue);       preg_match_all("#(.*);#U",$hpr_header,$header_content);        $project = str_replace(";","",$array_project[1]);           $reference = str_replace(";","",$array_reference[1]);      $issue = str_replace(";","",$array_issue[1]);      echo "<h2>Project</h2>".$project."<br/>";      echo "<h2>Ref</h2>".$reference."<br/>";      echo "<h2>Issue</h2>".$issue."<br/>";      /*       * Checkbox       */ 	  // echo $hpr_content;      preg_match_all("#Checkbox:(.*)FORMCHECKBOX#U",$hpr_content,$checkbox_status_rought);       //print_r($checkbox_status_rought)."<br/>";         for ($index = 0; $index <= 12; $index++){		  if (isset($checkbox_status_rought[1][$index])){			if (($checkbox_status_rought[1][$index] == "1: ") || ($checkbox_status_rought[1][$index] == "0:: ")){				$checkbox_status[$index] = true;			}			else {				$checkbox_status[$index] = false;			}		  }      }	    /*		 * Type		 */		if (isset($checkbox_status[0])){			if ($checkbox_status[0]) {				$type = "Defect";			}			else if ($checkbox_status[9]) {				$type = "Change";			}				else {				$type = "";			}		}					else {			$type = "";		}		/*		 * Severity		 */		if (isset($checkbox_status[1])){			if ($checkbox_status[1]) {				$severity = "Blocking";			}			else if ($checkbox_status[6]) {				$severity = "Major";			}			else if ($checkbox_status[10]) {				$severity = "Minor";			}			else if ($checkbox_status[12]) {				$severity = "Enhancement";			}					else {				$severity = "";			}		}		else {			$severity = "";		}		/*		 * Status		 */				$counter_check = 0;		$status = "No status";		if ($checkbox_status[2]) {			$status = "Raised";			$counter_check++;		}		if ($checkbox_status[3]) {			$status = "In progress";			$counter_check++;		}		if ($checkbox_status[4]) {			$status = "Fixed";			$counter_check++;		}		if ($checkbox_status[5]) {			$status = "Closed";			$counter_check++;		}				if ($checkbox_status[7]) {			$status = "Postponed";			$counter_check++;		}		if ($checkbox_status[8]) {			$status = "Workaround";			$counter_check++;		}			      echo "<h2>Type</h2>".$type."<br/>";      echo "<h2>Severity</h2>".$severity."<br/>";      echo "<h2>Status</h2>".$status."<br/>";        /*       * Technical Fact Description       */          //preg_match_all("#Node 005A2BBD00285EC5005A2BBD;(.*)#isu",$hpr_content,$content);        $full_content = explode("Node 005A2BBD00285EC5005A2BBD;",$hpr_content);      //print_r($hpr_content);      foreach ($full_content as $sub_content) {      	/* Replace NODE by carriage return */      	$content_inter = preg_replace("/(Node \w{1,32};)(.*);/","$2\n",$sub_content);      	/* Remove FORMTEXT */      	$content[] = preg_replace("/(FORMTEXT)/s","",$content_inter);      }      /*       * Miscelleanous info       */         preg_match_all("#(.*);#U",$hpr_content,$body_content); 	  //print_r($body_content[1]);	  $synopsis = preg_replace("/(FORMTEXT)/s","",$body_content[1][3]);      echo "<h2>Synopsis</h2>".$synopsis."<br/>";      $date = preg_replace("/(Date:)/","",$body_content[1][123]);	  $date = preg_replace("/(FORMTEXT)/s","",$date);      echo "<h2>Date Raised</h2>".$date."<br/>";	  $date_closed = preg_replace("/(Date:)/","",$body_content[1][127]);	  $date_closed = preg_replace("/(FORMTEXT)/s","",$date_closed);      echo "<h2>Date Closed</h2>".$date_closed."<br/>";	  /*	   * Date visa	   */	  $index=Tool::getStringIndex("/(Author Visa)/Us",&$content);	  preg_match("/Date:(.+)HW Part Number/Us",$content[$index],$array_date_visa);  	  $date_visa = str_replace(";","",$array_date_visa[1]);      echo "<h2>Date Visa</h2>".$date_visa."<br/>";	  $author = preg_replace("/(FORMTEXT)/s","",$body_content[1][133]);      echo "<h2>Author</h2>".$author."<br/>";	  $department = preg_replace("/(FORMTEXT)/s","",$body_content[1][137]);      echo "<h2>Department</h2>".$department."<br/>";	   /*   	   * Search for Assignment   	   */	  $index=Tool::getStringIndex("/(Assignment:)/",&$content);	  $tab1 = explode("EPR Follow-up", $content[$index]);	  preg_match("#Assignment:(.+)#s",$tab1[0],$array_assignment); 	  $assignment = str_replace(";","",$array_assignment[1]);	  $assignment = str_replace("REF PRName","",$assignment);	  $assignment = str_replace("MERGEFORMAT","",$assignment);	  $assignment = str_replace("\h","",$assignment);	  $assignment = str_replace("\*","",$assignment);	  $assignment = str_replace("\n","",$assignment);	  $assignment = str_replace("\r","",$assignment);      echo "<h2>Assignment</h2>".$assignment."<br/>";	   /*   	   * Search for EPR Follow-up   	   */	  $index=Tool::getStringIndex("/(Follow-up)/",&$content);	  $tab2 = explode("Evolution", $content[$index]);	  if ($tab2 == "") {		$string = $content[$index];	  }	  else {		$string = $tab2[0];	  }	  preg_match("#Follow-up:(.+)#s",$string,$array_follow_up); 	  $follow_up = str_replace(";","",$array_follow_up[1]);	  $follow_up = str_replace("\n","",$follow_up);	  $follow_up = str_replace("\r","",$follow_up);      echo "<h2>Follow-up</h2>".$follow_up."<br/>";	    	  /*   	   * Search for HW Part Number   	   */	  $index=Tool::getStringIndex("/(HW Part Number \(or Document\):)/",&$content);	  $tab3 = explode("Amendment", $content[$index]);	  preg_match("#HW Part Number \(or Document\):(.+)#s",$tab3[0],$array_hw_part_number); 	  $hw_part_number = str_replace(";","",$array_hw_part_number[1]);      echo "<h2>HW Part Number (or Document)</h2>".$hw_part_number."<br/>";	  /*	   * Amendment	   */		  $index=Tool::getStringIndex("/(Amendment \(or Issue\))/Us",&$content);	  $tab4 = explode("Checksum", $content[$index]);	  preg_match("#Amendment \(or Issue\):(.+)#s",$tab4[0],$array_amendment);  	  $amendment = str_replace(";","",$array_amendment[1]);      echo "<h2>Amendment (or Issue)</h2>".$amendment."<br/>";	  /*	   * Checksum	   */	  $index=Tool::getStringIndex("/(Checksum:)/Us",&$content);	  $tab5 = explode("Signature", $content[$index]);	  preg_match("#Checksum:(.+)#s",$tab5[0],$array_checksum);  	  $checksum = str_replace(";","",$array_checksum[1]);	  $checksum = str_replace("FORMTEXT","",$checksum);   	  echo "<h2>Checksum</h2>".$checksum."<br/>";   	  /*   	   * Search for following   	   */  	  $index=Tool::getStringIndex("/(Following:)/Us",&$content);  	  $tab6 = explode("Technical Fact Description", $content[$index]);   	  preg_match("#Following:(.+)#s",$tab6[0],$array_following);	  $following = str_replace(";","",$array_following[1]);	  $following = str_replace("\n","",$following);	  $following = str_replace("\r","",$following);	     	  echo "<h2>Following</h2>".$following."<br/>";   	  /*   	   * Search for tech_description   	   */ 	  $index=Tool::getStringIndex("/(Technical Fact Description:)/Us",&$content);  	 	  $tab7 = explode("Linked", $content[$index]);   	  preg_match("#Technical Fact Description:(.+)()*#s",$tab7[0],$array_tech_description);	  $tech_description = str_replace(";","",$array_tech_description[1]);	  echo "<h2>Technical Fact Description</h2>".$tech_description."<br/>";	  //$tech_description   = substr($tech_description,0,100)." etc ...";   	  /*   	   * Search for linked_hpr   	   */	  $index=Tool::getStringIndex("/(Linked)/Us",&$content);	  $tab8 = explode("Analysis", $content[$index]);	  preg_match("/Linked(.+)/Us",$tab8[0],$array_linked_hpr);	  $linked_hpr = str_replace(";","",$array_linked_hpr[1]);	  $linked_hpr = str_replace("FORMTEXT","",$linked_hpr);	  	  $linked_hpr = str_replace(";","",$linked_hpr);     	  echo "<h2>Linked HPR</h2>".$linked_hpr."<br/>";      /*   	   * Search for expected_modif   	   */ 	  $index=Tool::getStringIndex("/(Analysis \/ Expected Modification:)/Us",&$content);	  $tab8 = explode("Evolution \/ Implemented Modification", $content[$index]);   	  preg_match("#Analysis \/ Expected Modification:(.+)*#s",$tab8[0],$array_expected_modif);	  $expected_modif = str_replace(";","",$array_expected_modif[1]);	  echo "<h2>Analysis / Expected Modification</h2>".$expected_modif."<br/>";	  //$expected_modif   = substr($expected_modif,0,100)." etc ...";   	        /*   	   * Search for implementation   	   */	 	  $index=Tool::getStringIndex("/(Evolution \/ Implemented Modification:)/Us",&$content); 	     	  $implementation = preg_replace("/(Evolution \/ Implemented Modification:)/","",$content[$index]);   	  /* Remove Date */   	  $implementation = preg_replace("/(Date:.DD MM YY)/","",$implementation);	  $implementation = str_replace(";","",$implementation);	  echo "<h2>Evolution / Implemented Modification</h2>".$implementation."<br/>";	  //$implementation   = substr($implementation,0,100)." etc ...";   	  		$index = 0;		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $project);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $reference);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $issue);					$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $type);							$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $severity);		/*		 * Status		 */				$counter_check = 0;		$status = "No status";		if ($checkbox_status[2]) {			$status = "Raised";			$counter_check++;		}		if ($checkbox_status[3]) {			$status = "In progress";			$counter_check++;		}		if ($checkbox_status[4]) {			$status = "Fixed";			$counter_check++;			$objPHPExcel->getActiveSheet()->getStyle('F'.$row_counter)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);			$objPHPExcel->getActiveSheet()->getStyle('F'.$row_counter)->getFill()->getStartColor()->setARGB('0000FF');		}		if ($checkbox_status[5]) {			$status = "Closed";			$counter_check++;			$objPHPExcel->getActiveSheet()->getStyle('F'.$row_counter)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);			$objPHPExcel->getActiveSheet()->getStyle('F'.$row_counter)->getFill()->getStartColor()->setARGB('00FF00');		}				if ($checkbox_status[7]) {			$status = "Postponed";			$counter_check++;		}		if ($checkbox_status[8]) {			$status = "Workaround";			$counter_check++;		}			/*		 * Test several checkboxes selected		 */		if ($counter_check > 1) {			$objPHPExcel->getActiveSheet()->getStyle('F'.$row_counter)->getFont()->getColor()->setARGB(PHPExcel_Style_Color::COLOR_RED);		}			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $status);				$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $synopsis);			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $author);			$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $department);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $date);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $hw_part_number);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $checksum);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $following);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $tech_description);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $linked_hpr);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $expected_modif);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $implementation);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $date_visa);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $date_closed);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $assignment);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $follow_up);		$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($index++,$row_counter, $amendment);		$row_counter++;		//Deletes the file.   		//$mvcfile->Delete(); 	      }   catch (OpenXMLFatalException $e) {         echo $e->getMessage();      }	unset($content);	unset($hpr_content);	unset($content);	//unlink($uploadName);	$objPHPExcel->getActiveSheet()->getStyle('A27:V'.$row_counter)->applyFromArray($styleArray);	$objPHPExcel->getActiveSheet()->getStyle('A27:V'.$row_counter)->getAlignment()->setWrapText(true);  	/* To apply an autofilter to a range of cells */ 	$objPHPExcel->getActiveSheet()->setAutoFilter('A26:V26');	/* count requirerments */	//$objPHPExcel->getActiveSheet()->setCellValue('B14','=NBVAL(A,A)');	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');	$filename = "HPR_{$today_date}.xlsx";	$objWriter->save('../result/'.$filename);	//$objWriter->save('php://output'); 		// Echo done	echo date('H:i:s') . " Done writing HPR.<br />";	echo " Document generated at ".date('H:i:s')." with peak memory usage: " . (memory_get_peak_usage(true) / 1024 / 1024) . " MB\r\n";    echo '<br/><br/>'; ?><a href="<?php echo '../result/HPR_'.$today_date.'.xlsx' ?>" ><img alt="Export openxml" title="Export openxml" border=0 src="../../images/excel_sheet.png" class='img_button'   onmouseover="this.style.margin='0px';this.style.width='64px';this.style.height='64px';"   onmouseout="this.style.margin='8px';this.style.width='48px';this.style.height='48px';" /></a> <?	  }else if($type_id == 22) { /* IG */    $text = Tool::read_openxml($uploadName,"ig.xslt");	$filename = "test.txt";	$monfichier = fopen($filename, 'a');	fputs($monfichier, $text."\n");	fclose($monfichier);	$xml = simplexml_load_string($text);	$data = array('body'=>"");	// $rules = array('id'=>"",array('type'=>"",'rule'=>""));	$rules  =array();	// $html = $text."<br/>-------oOo-------<br/>";	$html = "";	// echo $html;	foreach ($xml->children() as $item):		$data['body'] ="";		//var_dump($item);		$children_name = $item->getName();		if ($children_name == "table"){			$data['body'] .= '<table style="border:5px solid green"><tbody>';			// var_dump($table);			//echo "T1:";			foreach ($item->children() as $tr){				//echo "T2:";				$data['body'] .= '<tr>';				$found = false;				foreach ($tr->children() as $tc){					//echo "T3:";					$data['body'] .= "<td>";					if (preg_match("/^Rule_(File|CSCI|SCOD)_([0-9]{1,3})$/Ui",$tc,$txt)){						$found = true;						$data['body'] .= '<span style="color:red">'.$tc."</span>";						$id = $txt[2];						$type = $txt[1];						// $rules['type']=$txt[1];					}					else{						if ($found){							// foreach ($tc->children() as $p){							$rule_text = Tool::convert_html2txt((string)$tc);							// var_dump($rule_text);							// $res = preg_match("/(.+)\\n/Us",$rule_text,$test);							$rule_text = str_replace("\n"," ",$rule_text);							$rule_text = preg_replace(array("/“/","/”/","/”/","/…/","/'/"),array("\"","\"","\"","..."," "), $rule_text);							// var_dump($test);exit();							$rules[] = array('type'=>$type,'id'=>$id,'rule'=>$rule_text);							// $rules['rule']=(string)$tc;							// }							$found = false;						}						$data['body'] .= $tc;					}					// var_dump($tc);					// var_dump($txt);					foreach ($tc->children() as $p){						foreach ($p->children() as $inside):							$children_name = $inside->getName();							if ($children_name == "span"){								$data['body'] .= $inside;							}						endforeach;					}					$data['body'] .= "</td>";				}				$data['body'] .= "</tr>";			}			// var_dump($rules);			$data['body'] .= "</tbody></table>";			$html .= $data['body'];		}	endforeach;		$filename = "rules.csv";	$monfichier = fopen($filename, 'r+');	$string = "ID;Type;Rule_ID;Rule";	fputs($monfichier, $string."\n");	foreach($rules as $id => $rule):		// var_dump($rule);		$string = $id.";".$rule['type'].";".$rule['id'].";".$rule['rule'];		fputs($monfichier, $string."\n");	endforeach;	fclose($monfichier);	Atomik::set('display',$html);	Atomik::setView("export/display_hpr");		}else if (($type_id == 34)||($type_id == 97)) { /* HPR or EPR */	/* type word 2007 */    $text = Tool::read_openxml($uploadName,"preview-hpr-table-new.xslt");    // $text = Tool::read_openxml($uploadName,"DocX2Html.xslt"); 	//exit();	// $filename = "test.txt";	// $monfichier = fopen($filename, 'a');	// fputs($monfichier, $text."\n");	// fclose($monfichier);	// libxml_use_internal_errors(true);	$xml = simplexml_load_string($text);	$data = array('body'=>"");	$html = $text."<br/>-------oOo-------<br/>";	// echo $html;	$count_cell=1;	$synopsis = "";	foreach ($xml->children() as $item):		$data['body'] ="";		//var_dump($item);		$children_name = $item->getName();		if ($children_name == "table"){			$data['body'] .= '<table><tbody>';			// var_dump($table);			//echo "T1:";			foreach ($item->children() as $tr){				//echo "T2:";				$synopsis_next = false;				$data['body'] .= '<tr>';				foreach ($tr->children() as $tc){					//echo "T3:";					$data['body'] .= "<td>";					$data['body'] .= $tc;					echo "cell n°".$count_cell++.": ";					foreach ($tc->children() as $p){						foreach ($p->children() as $inside):							/* check PR synopsis */							if($synopsis_next){								$synopsis .= $inside;							}							$result_match = preg_match("/Synopsis:/Us",$inside);							if ($result_match){								$synopsis_next = true; 							}							/* check PR type */							if ($count_cell == 6){							}							echo $inside;							$children_name = $inside->getName();							if ($children_name == "span"){								$data['body'] .= $inside;							}							if ($children_name == "checkbox"){								$data['body'] .= $inside;							}							else if($children_name == "image"){								/* images */								/* found media file*/								$img="";								$image_name = Tool::getMedia($uploadName,$inside,&$img);								// echo $img;								preg_match("/media\/(.+\..+)$/",$image_name,$filename_array);								$filename = isset($filename_array[1])?$filename_array[1]:"";								//if (file_exists($filename)){								file_put_contents("../result/".$filename, $img);								//}								if (preg_match("/.+\.[e|w]mf$/",$image_name)){									$image_png = Tool::convertEmfToPng($filename);									if ($image_png !== false){										$data['body'] .= '<img src="../../result/'.$image_png.'" title="'.$image_name.'">';									}									else{										$data['body'] .= '<img src="'.Atomik::asset('assets/images/error.png').'" title="'.$image_name.'">';									}								}								else{									$data['body'] .= '<img style="max-width:100%; max-height:100%" src="../../result/'.$filename.'" title="'.$image_name.'">';									// var_dump($filename_array);									// exit();								}							}						endforeach;					}					echo "<br/>";					$data['body'] .= "</td>";				}				$data['body'] .= "</tr>";			}			$data['body'] .= "</tbody></table>";			$html .= $data['body'];		}	endforeach;	echo "TEST:".$synopsis;	Atomik::set('display',$html);	Atomik::setView("export/display_hpr");	}else {              // Make sure the file size isn't too big.	$row_counter=0;		$file_template = dirname(__FILE__).							DIRECTORY_SEPARATOR."..".								DIRECTORY_SEPARATOR."..".								DIRECTORY_SEPARATOR."..".							DIRECTORY_SEPARATOR."assets".							DIRECTORY_SEPARATOR."template".							DIRECTORY_SEPARATOR."validation_template_02.xlsx";							error_reporting(E_ALL);	$cacheMethod = PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;	PHPExcel_Settings::setCacheStorageMethod($cacheMethod);	if (!file_exists($file_template)) {		exit("Validation matrix template is missing.\n");	}	$objPHPExcel = PHPExcel_IOFactory::load($file_template);	$reference = "";	$username = User::getNameUserLogged();	$objPHPExcel->getProperties()->setCreator($username)								 ->setLastModifiedBy($username)								 ->setTitle("Validation Matrix")								 ->setSubject("Ref:".$reference)								 ->setDescription("Validatin Matrix for ")								 ->setKeywords("validation matrix")								 ->setCategory("Validation Matrix Report");		$objPHPExcel->setActiveSheetIndex(0);	$objPHPExcel->getActiveSheet()->setCellValue('H4', $today_date);	$objPHPExcel->getActiveSheet()->setCellValue('E22', $username);	$objPHPExcel->getActiveSheet()->setCellValue('H22', $today_date);	$objPHPExcel->setActiveSheetIndex(1);	$objPHPExcel->getActiveSheet()->setCellValue('H4', $today_date);	$objPHPExcel->getActiveSheet()->setCellValue('C10', $today_date);	$objPHPExcel->getActiveSheet()->setCellValue('G10', $username);	$objPHPExcel->setActiveSheetIndex(2);	$objPHPExcel->getActiveSheet()->setCellValue('F4', $today_date);	$objPHPExcel->setActiveSheetIndex(3);	$objPHPExcel->getActiveSheet()->setCellValue('T4', $today_date);		$objPHPExcel->getActiveSheet()->setCellValue('A3', "");	$objPHPExcel->setActiveSheetIndex(5);	$objPHPExcel->getActiveSheet()->getStyle('A1:S'.strval(8))->applyFromArray($style_blank);	$objPHPExcel->getActiveSheet()->getStyle('A'.strval(9).':S'.strval(750))->applyFromArray($style_encadrement);		$objValidation = $objPHPExcel->getActiveSheet()->getCell('H10')->getDataValidation();	$objValidation->setType( PHPExcel_Cell_DataValidation::TYPE_LIST );	$objValidation->setErrorStyle( PHPExcel_Cell_DataValidation::STYLE_INFORMATION );	$objValidation->setAllowBlank(false);	$objValidation->setShowInputMessage(true);	$objValidation->setShowErrorMessage(true);	$objValidation->setShowDropDown(true);	$objValidation->setErrorTitle('Input error');	$objValidation->setError('Value is not in list.');	$objValidation->setPromptTitle('Pick from list');	$objValidation->setPrompt('Please pick a value from the drop-down list.');	$objValidation->setFormula1('"OK,NOK,ND"');		$row_counter = 0;	$line = 0;	if (($project_id == 9) &&  // Eurocopter EC175		($sub_project_id == 25) && // PLB		($type_id == 21)){ // SSCS		if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {		    /* type word 2007 */		    $text = Tool::read_openxml($uploadName,"preview-word.xslt");		}		else {		    /* type openoffice */		    $text = Tool::odt2text ($uploadName,"preview-word.xslt");		}		$regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";		preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);		foreach ($matches_traca as $val):			if (isset($val[2])){				if (preg_match("/DELETE/i",$val[2])){					echo "req deleted!<br/>";					continue;				}			}			if (isset($val[0])){				// echo "Test:".$val[1]."<br/>";				$text = str_replace("/","_",$val[0]);				// $regular_expression = "/\@req_tag\@.*\@upper\@(SES.*|SAF.*|ICD.*|derived)/Ui";				$regular_expression = "\@upper\@(\w.+)(\@upper\@|\@attribute\@|\@req_tag\@)";				preg_match_all("#".$regular_expression."#U",$text, $sub_matches_traca, PREG_SET_ORDER);					$req = $val[1];					if ($sub_matches_traca){						$line = $row_counter+9;						$row_counter++;							echo "<b>Req_".$row_counter.": </b>".$val[1]."<br/>";						if (isset($val[2])){echo "<b>Attribute allocation: </b>".$val[2]."<br/>";} /* Attribute allocation */						$excel_alloc = $val[2];						$excel_upper_req ="";						foreach ($sub_matches_traca as $upper_req) {							echo "<b> --> </b>".$upper_req[1]."<br/>";							$excel_upper_req = $excel_upper_req."\n".$upper_req[1];												}						if ($row_counter % 2) {							/* alternate white and grey line color */							$objPHPExcel->getActiveSheet()->getStyle('A'.$line.':S'.$line)->applyFromArray($style_white_line_prr);						}						/* Upper Req */						Tool::clean_author_response(&$excel_upper_req);						$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(1,$line,$excel_upper_req);						/* Id */						$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(2,$line,"Req_".$row_counter);							/* Req */										$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(3,$line,$req);							/* Allocation */						$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(5,$line,$excel_alloc);						/* Copy OK/KO */						$value = $objPHPExcel->getActiveSheet()->getCellByColumnAndRow(7,9)->getValue();						$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow(7,$line,$value);						$conditionalStyles = $objPHPExcel->getActiveSheet()->getStyle('H9')->getConditionalStyles();						$objPHPExcel->getActiveSheet()->getStyleByColumnAndRow(7,$line)->setConditionalStyles($conditionalStyles);						/* border inside */						$objPHPExcel->getActiveSheet()->getStyle('A'.$line.':S'.$line)->getBorders()->getInside()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);												// if ($row_counter == 20)break;					}					// if (isset($val[3])){echo "".$val[3]."<br/>";} /* Derived */									}			// if (isset($val[2])){echo $val[2]."<br/>";}			// if (isset($val[3])){echo $val[3]."<br/>";}			endforeach;	}	else if (($project_id == 3) &&  // Embraer Legacy 450		($sub_project_id == 3) && // SSPC		($type_id == 21)){ // SSCS	        if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {            /* type word 2007 */            $text = Tool::read_openxml($uploadName,"preview-word.xslt");        }        else {            /* type openoffice */            $text = Tool::odt2text ($uploadName,"preview-word.xslt");        }		echo '<table cellspacing="0" class="pagetable">';		echo "<theader>";		$header_fields = array("Id"=>2,"ReqId"=>6,"Item"=>2, "Sub Item"=>2,"Function"=>2,"Id"=>2, "Issue"=>3,"Justification"=>8,"Upper"=>6,"Alloc."=>2,"Body"=>8 );		foreach( $header_fields as $value => $colpsan):			echo "<th colspan='".$colpsan."'>".$value."</th>";		endforeach;				echo "</theader>";		echo "<tbody>";			// preg_match("/@req_tag@(@upper@){0,2}(.*)/Ui",$text,$output);		// var_dump($output);		$text = str_replace("@req_tag@@upper@","@req_tag@",$text);		$text = str_replace("@req_tag@@upper@","@req_tag@",$text);				$regular_expression = "\@req_tag\@(\@upper\@)?(.*)\@justif\@(.*)\@req_body\@(.*)\@end_req\@End_Req";		preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);		foreach ($matches_traca as $val):			// var_dump($val);			set_time_limit(0);			$line = $row_counter+9;			$row_counter++;			/* req */			preg_match("/([a-zA-Z0-9_\/]+)\@upper\@/Ui",$val[2],$text);			// var_dump($text);			$req = $text[1];//str_replace("@upper@@upper@","",$text[1]);			$data['req'] = $req;			preg_match("/SSCS_([a-zA-Z0-9]+)(_([a-zA-Z0-9]+))?(_([a-zA-Z0-9]+))?(_([a-zA-Z0-9]+))?_([0-9]+)(_([a-zA-Z]+))?(\/([a-zA-Z]+))?_([0-9]+)/Ui",$req,$req_out);			// echo "Req:".$req."<br/>";			// var_dump($req_out);			if (isset($req_out[1])){				$data['item'] = $req_out[1];				$data['sub_item'] = $req_out[5];								$data['function'] = $req_out[7];				/*				$id = $text[4];				$data['id'] = $id;				*/				$data['issue'] = $req_out[13];			}			/* justification */			preg_match("/Justification\@upper\@ ?(\w.+)/i",$val[3],$justif_out);			// var_dump($text);			$data['justification'] = $justif_out[1];						// $regular_expression = "Justification\@upper\@ ?(\w.+)";			// preg_match_all("#".$regular_expression."#U",$data['justification'], $sub_matches_traca, PREG_SET_ORDER);				/* 			 * Upper req 			 */			$str1 = str_replace("/","_",$req);			$str2 = str_replace("/","_",$val[2]);			$upper_req_list = preg_split('/(\@req_tag\@)?'.$str1.'/', $str2, -1, PREG_SPLIT_NO_EMPTY);			// var_dump($upper_req_list);			$excel_upper_req ="";					foreach ($upper_req_list as $upper_req):				preg_match("/\@upper\@(.+)/i",$upper_req,$text);				// echo "<b> --> </b>".$text[1]."<br/>";				if (preg_match("/Deleted/i",$text[1])){					echo $row_counter.") DELETED<br/>";continue;				}				$excel_upper_req = $excel_upper_req."\n".$text[1];							endforeach;				$data['upper'] = $excel_upper_req;							/* 			 * Alloc 			 */			$data['alloc'] = $req_out[10]." ".$req_out[12];			/*			 * Body			 */			$body = isset($val[4])?str_replace("@req_body@","\n",$val[4]):"";			$body = str_replace("@body@","\n",$body);			$body = str_replace("@upper@","     ",$body);			$body = str_replace("&gt;",">",$body);			$body = str_replace("&lt;","<",$body);			$body = preg_replace("/Table  SEQ Table .* ARABIC ([0-9]){1,3}/i", "\nTable", $body);			$body = preg_replace("/Figure  ?SEQ Figure .* ARABIC ([0-9]){1,3}/i", "\nFigure", $body);			$body = preg_replace("/REF _Ref([0-9]){9} .* Figure/i", "\nFigure", $body);			$body = preg_replace("/REF _Ref([0-9]){9} .* Table/i", "\nTable", $body);					$data['body'] = $body;					// break;			$color = ($row_counter % 2 == 0)? "rouge" : "vert";			echo "<tr class='grey_border ".$color."'>";					$colspan = reset($header_fields);			$colspan = current($header_fields);			echo "<td colspan='".$colspan."'>".$row_counter."</td>";			foreach ($data as $key => $val) {				//var_dump($colspan);				/* check @ */				$color="";				if (preg_match("/@/i",$val)){					$color="yellow";				}				/* check multiple shall */				if ($key == "body"){					$val = preg_replace("/(shall)/i","<b>shall</b>",$val,-1,$count);					if ($count > 1){						if ($color != ""){							$color="red";						}						else{							$color="orange";						}					}					}				/* check derived requirement without rationale */				if ($key == "upper"){					if ((preg_match("/Derived/i",$val))&&(($data['justification']=="")||($data['justification']=="NA"))){						$color="yellow";					}				}				$colspan = next($header_fields);				echo "<td class='".$color."' colspan='".$colspan."'>".$val."</td>";							}			//echo "<td>{$val}</td>";			// var_dump($data);			display(&$objPHPExcel,					&$data,					$line,					$style_white_line_prr);			unset($data);					echo "</tr>";		endforeach;		echo "</tbody>";		echo "</table>";		//$regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";		// $regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";		//preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);		// var_dump($matches_traca);		// exit();	}    else if (($project_id == 3) &&  // Embraer Legacy 450        ($sub_project_id == 5) && // DU        ($type_id == 6)){ // SES        if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {            /* type word 2007 */            $text = Tool::read_openxml($uploadName,"preview-word-du-ses.xslt");        }        else {            /* type openoffice */            $text = Tool::odt2text ($uploadName,"preview-word-du-ses.xslt");        }        echo $text."<br/><br/>";        echo '<table cellspacing="0" class="pagetable">';        echo "<theader>";        $header_fields = array("Id"=>2,"ReqId"=>6,"Item"=>2, "Sub Item"=>2,"Function"=>2,"Id"=>2, "Issue"=>3,"Justification"=>8,"Upper"=>6,"Alloc."=>2,"Body"=>8 );        foreach( $header_fields as $value => $colpsan):            echo "<th colspan='".$colpsan."'>".$value."</th>";        endforeach;             echo "</theader>";        echo "<tbody>";         // preg_match("/@req_tag@(@upper@){0,2}(.*)/Ui",$text,$output);        // var_dump($output);        $text = str_replace("@req_tag@@upper@","@req_tag@",$text);        $text = str_replace("@req_tag@@upper@","@req_tag@",$text);              $regular_expression = "\@req_tag\@(\@upper\@)?(.*)\@justif\@(.*)\@req_body\@(.*)\@end_req\@End_Req";        preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);        foreach ($matches_traca as $val):            // var_dump($val);            set_time_limit(0);            $line = $row_counter+9;            $row_counter++;            /* req */            preg_match("/([a-zA-Z0-9_\/]+)\@upper\@/Ui",$val[2],$text);            // var_dump($text);            $req = $text[1];//str_replace("@upper@@upper@","",$text[1]);            $data['req'] = $req;            preg_match("/SSCS_([a-zA-Z0-9]+)(_([a-zA-Z0-9]+))?(_([a-zA-Z0-9]+))?(_([a-zA-Z0-9]+))?_([0-9]+)(_([a-zA-Z]+))?(\/([a-zA-Z]+))?_([0-9]+)/Ui",$req,$req_out);            // echo "Req:".$req."<br/>";            // var_dump($req_out);            if (isset($req_out[1])){                $data['item'] = $req_out[1];                $data['sub_item'] = $req_out[5];                                $data['function'] = $req_out[7];                /*                $id = $text[4];                $data['id'] = $id;                */                $data['issue'] = $req_out[13];            }            /* justification */            preg_match("/Justification\@upper\@ ?(\w.+)/i",$val[3],$justif_out);            // var_dump($text);            $data['justification'] = $justif_out[1];                        // $regular_expression = "Justification\@upper\@ ?(\w.+)";            // preg_match_all("#".$regular_expression."#U",$data['justification'], $sub_matches_traca, PREG_SET_ORDER);             /*              * Upper req              */            $str1 = str_replace("/","_",$req);            $str2 = str_replace("/","_",$val[2]);            $upper_req_list = preg_split('/(\@req_tag\@)?'.$str1.'/', $str2, -1, PREG_SPLIT_NO_EMPTY);            // var_dump($upper_req_list);            $excel_upper_req ="";                   foreach ($upper_req_list as $upper_req):                preg_match("/\@upper\@(.+)/i",$upper_req,$text);                // echo "<b> --> </b>".$text[1]."<br/>";                if (preg_match("/Deleted/i",$text[1])){                    echo $row_counter.") DELETED<br/>";continue;                }                $excel_upper_req = $excel_upper_req."\n".$text[1];                          endforeach;             $data['upper'] = $excel_upper_req;                          /*              * Alloc              */            $data['alloc'] = $req_out[10]." ".$req_out[12];            /*             * Body             */            $body = isset($val[4])?str_replace("@req_body@","\n",$val[4]):"";            $body = str_replace("@body@","\n",$body);            $body = str_replace("@upper@","     ",$body);            $body = str_replace("&gt;",">",$body);            $body = str_replace("&lt;","<",$body);            $body = preg_replace("/Table  SEQ Table .* ARABIC ([0-9]){1,3}/i", "\nTable", $body);            $body = preg_replace("/Figure  ?SEQ Figure .* ARABIC ([0-9]){1,3}/i", "\nFigure", $body);            $body = preg_replace("/REF _Ref([0-9]){9} .* Figure/i", "\nFigure", $body);            $body = preg_replace("/REF _Ref([0-9]){9} .* Table/i", "\nTable", $body);                   $data['body'] = $body;                  // break;            $color = ($row_counter % 2 == 0)? "rouge" : "vert";            echo "<tr class='grey_border ".$color."'>";                 $colspan = reset($header_fields);            $colspan = current($header_fields);            echo "<td colspan='".$colspan."'>".$row_counter."</td>";	         foreach ($data as $key => $val) {	         	$color = Tool::checkValidity($key,$val,$data['justification']);	             $colspan = next($header_fields);	             echo "<td class='".$color."' colspan='".$colspan."'>".$val."</td>";	          }            //echo "<td>{$val}</td>";            // var_dump($data);            display(&$objPHPExcel,                    &$data,                    $line,                    $style_white_line_prr);            unset($data);                   echo "</tr>";        endforeach;        echo "</tbody>";        echo "</table>";        //$regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";        // $regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";        //preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);        // var_dump($matches_traca);        // exit();    }		else if (($project_id == 3) &&  // Embraer Legacy 450		($sub_project_id == 12) && // SPDS		($type_id == 6)){ // SES	        if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {            /* type word 2007 */            $text = Tool::read_openxml($uploadName,"preview-word.xslt");        }        else {            /* type openoffice */            $text = Tool::odt2text ($uploadName,"preview-word.xslt");        }		        echo '<table cellspacing="0" class="pagetable">';		echo "<theader>";		$header_fields = array("Id"=>2,"ReqId"=>3,"Item"=>2, "Sub Item"=>2,"Function"=>2,"Id"=>2, "Issue"=>3,"Justification"=>8,"Upper"=>3,"Allocation"=>2,"Body"=>8 );		foreach( $header_fields as $value => $colpsan):			echo "<th colspan='".$colpsan."'>".$value."</th>";		endforeach;				echo "</theader>";		echo "<tbody>";		$regular_expression = "\@req_tag\@(.*)\@justif\@(.*)\@alloc\@(.*)\@req_body\@(.*)\@end_req\@";		preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);		foreach ($matches_traca as $val):			set_time_limit(0);			$line = $row_counter+9;			$row_counter++;			/* req */			preg_match("/(.+)\@upper\@/Ui",$val[1],$text);			// var_dump($text);			$req = $text[1];			$data['req'] = $req;			preg_match("/^SPDS_([a-zA-Z]+)(_[a-zA-Z]+)?(_[a-zA-Z]+)?_([0-9]+)_([0-9]+)/Ui",$req,$text);			// echo "Req:".$req."<br/>";			// var_dump($text);			if (isset($text[1])){				$item = $text[1];				$data['item'] = $item;				$sub_item = str_replace("_","",$text[2]);				$data['sub_item'] = $sub_item;								$function = str_replace("_","",$text[3]);				$data['function'] = $function;				/*				$id = $text[4];				$data['id'] = $id;				*/				$issue = $text[5];				$data['issue'] = $issue;			}			/* justification */			preg_match("/Justification\@upper\@ ?(\w.+)/i",$val[2],$text);			// var_dump($text);			$justif = $text[1];				$data['justification'] = $justif;						$regular_expression = "Justification\@upper\@ ?(\w.+)";			preg_match_all("#".$regular_expression."#U",$justif, $sub_matches_traca, PREG_SET_ORDER);				/* upper req */			$upper_req_list = preg_split('/(\@req_tag\@)?'.$req.'/', $val[1], -1, PREG_SPLIT_NO_EMPTY);			// var_dump($upper_req_list);			$excel_upper_req ="";			// echo "Upper:<br/>";						foreach ($upper_req_list as $upper_req):				preg_match("/\@upper\@(.+)/i",$upper_req,$text);				// echo "<b> --> </b>".$text[1]."<br/>";				if (preg_match("/Deleted/i",$text[1])){					echo $row_counter.") DELETED<br/>";continue;				}				$excel_upper_req = $excel_upper_req."\n".$text[1];							endforeach;				$data['upper'] = $excel_upper_req;							/* allocation */			$allocation_list = preg_split('/\@alloc\@/', $val[3], -1, PREG_SPLIT_NO_EMPTY);			// var_dump($allocation_list);			$excel_alloc ="";			// echo "Allocation:<br/>";			foreach ($allocation_list as $allocation):				preg_match("/Allocation :\@upper\@ ?(\w.+)/i",$allocation,$text);				// echo "<b> --> </b>".$text[1]."<br/>";				$excel_alloc = $excel_alloc."\n".$text[1];							endforeach;					$data['alloc'] = $excel_alloc;						// $regular_expression = "Allocation :\@upper\@ ?(\w.+)";			// preg_match_all("#".$regular_expression."#U",$allocation, $sub_matches_traca, PREG_SET_ORDER);			$body = str_replace("@req_body@","\n",$val[4]);			$body = str_replace("@body@","\n",$body);			$body = str_replace("@upper@","     ",$body);			$body = str_replace("&gt;",">",$body);			$body = str_replace("&lt;","<",$body);			// $body = preg_replace("/Table  SEQ Table \\\* ARABIC ([0-9]){1,3}/i", "\nTable", $body);			// $body = preg_replace("/Figure  ?SEQ Figure \\\* ARABIC ([0-9]){1,3}/i", "\nFigure", $body);			// $body = preg_replace("/REF _Ref([0-9]){9} \\h Figure/i", "\nFigure", $body);			$body = preg_replace("/Table  SEQ Table .* ARABIC ([0-9]){1,3}/i", "\nTable", $body);			$body = preg_replace("/Figure  ?SEQ Figure .* ARABIC ([0-9]){1,3}/i", "\nFigure", $body);			$body = preg_replace("/REF _Ref([0-9]){9} .* Figure/i", "\nFigure", $body);			$body = preg_replace("/REF _Ref([0-9]){9} .* Table/i", "\nTable", $body);					// echo "Body:".$body."<br/><br/>";			$data['body'] = $body;					// break;			$color = ($row_counter % 2 == 0)? "rouge" : "vert";			echo "<tr class='".$color."'>";					$colspan = reset($header_fields);			$colspan = current($header_fields);			echo "<td colspan='".$colspan."'>".$row_counter."</td>";			foreach ($data as $val) {				//var_dump($colspan);				$colspan = next($header_fields);				echo "<td colspan='".$colspan."'>".$val."</td>";							}			//echo "<td>{$val}</td>";						display(&$objPHPExcel,					&$data,					$line,					$style_white_line_prr);			unset($data);					echo "</tr>";					endforeach;		echo "</tbody>";		echo "</table>";		// var_dump($matches_traca);		// exit();			}	else if (($type_id == 120)||($type_id == 121)){ // GTR        if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {            /* type word 2007 */            $text = Tool::read_openxml($uploadName,"preview-word-sms-sgtr.xslt");        }        else {            /* type openoffice */            $text = Tool::odt2text ($uploadName,"preview-word-sms-sgtr.xslt");        }        //getListMedia();        // echo $text."<br/><br/>";        echo '<table cellspacing="0" class="pagetable">';        echo "<theader>";        $header_fields = array("Id"=>2,"ReqId"=>6,"Item"=>2, "Sub Item"=>2,"Func"=>2,"Id"=>2, "Issue"=>3,"Justification"=>8,"Upper"=>6,"Alloc."=>2,"Body"=>8 );        foreach( $header_fields as $value => $colpsan):            echo "<th colspan='".$colpsan."'>".$value."</th>";        endforeach;             echo "</theader>";        echo "<tbody>";            $regular_expression = "<req_tag>(.*)<\/req_tag>";        preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);        foreach ($matches_traca as $val):            //var_dump($val);            set_time_limit(0);            $line = $row_counter+9;            $row_counter++;            /* req */            /*            $res = preg_match("/\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-\s]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\]?/Ui",$val[1],$text);            if (!$res){	            $res = preg_match("/\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\]?/Ui",$val[1],$text);				if (!$res){					$res = preg_match("/\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\]?/Ui",$val[1],$text);					if (!$res){						$res = preg_match("/.+\[([a-zA-Z0-9_\-]+)\]\s?\[([a-zA-Z0-9_\-]+)\]\]?/Ui",$val[1],$text);					}				}            }            else{            	 //var_dump($text);            }*/            $res = preg_match("/.*\[[A-Z]{0,3}_?\]?(B1[0-9_\-]+)\].+\[(SR-[a-zA-Z0-9_]+)\]\]?/Ui",$val[1],$text);            if (!$res){            	$res = preg_match("/\[(SR-[a-zA-Z0-9_]+)\]\]?/Ui",$val[1],$text);            }            	 $old_req = "B1-?_???";            	 $new_req = "SR-???????";            	 foreach($text as $item):            	 	if (preg_match("/(B1[0-9_\-]+)/Ui",$item)){            	 		// found B1-X_X id            	 		$old_req = $item;            	 	}            	             	 	if (preg_match("/(SR-[a-zA-Z0-9]+)/Ui",$item)){            	 		// found SR-000XXXX id            	 		$new_req = $item;            	 	}            	 	//echo $item."<br/>";            	 endforeach;                       /*			if(!isset($text[3])){				// var_dump($val);				// var_dump($text);				$old_req = "None";					$new_req = isset($text[2])?$text[2]:"";			}			else if (preg_match("/(SR-[a-zA-Z0-9]+)/Ui",$text[3])){				// if missing MAN				$old_req = isset($text[1])?preg_replace('/[A-Z]{3}_(.+)/','$1',$text[1]):"";					$new_req = isset($text[3])?$text[3]:"";			}            else{				$old_req = isset($text[2])?$text[2]:"";				$new_req = isset($text[4])?$text[4]:"";			}			*/			//if (($old_req == false)||($new_req == false)){				//var_dump($text);				//echo $val[1].":     ";			//}			echo $old_req." ; ".$new_req."<br/>";			//if ($row_counter > 3)break;						continue;        endforeach;        echo "</tbody>";        echo "</table>";        //$regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";        // $regular_expression = "\@req_tag\@(.*)\@upper\@.*Attr?ibute.*: ?(DELETED|hardware|FPGA_FUNC|FPGA_BITE)";        //preg_match_all("#".$regular_expression."#U",$text, $matches_traca, PREG_SET_ORDER);        // var_dump($matches_traca);        // exit();    }	else if ($type_id == 119){ // SDTS		set_time_limit(0);        if ($uploadType == "application/vnd.openxmlformats-officedocument.wordprocessingml.document") {            /* type word 2007 */            $text = Tool::read_openxml($uploadName,"preview-word-sms-sdts.xslt");        }        else {            /* type openoffice */            $text = Tool::odt2text ($uploadName,"preview-word-sms-sdts.xslt");        }        //echo $text."<br/>-------oOo-------<br/>";		//exit();		$filename = "test.txt";		// $monfichier = fopen($filename, 'a');		// fputs($monfichier, $text."\n");		// fclose($monfichier);		// libxml_use_internal_errors(true);		$xml = simplexml_load_string($text);		// print_r($xml);        echo '<table border="1" cellspacing="0" class="pagetable">';        echo "<theader>";        $header_fields = array("Id"=>2,								"ReqId"=>16,								"Item"=>2, 								"Sub Item"=>2,								"Function"=>2,								"Id"=>3, 								"Issue"=>6,								"Justification"=>16,								"Upper"=>20,								"Alloc."=>8,								"Body"=>100,								"Status"=>8,								"Safety"=>6,								"Derived"=>6,								"Conform."=>6,								"Verif"=>8,								"Compliance"=>8,								"Justif Type"=>10,								"Assumption"=>6,								"PR"=>3,								"Add."=>30								);        foreach( $header_fields as $value => $colpsan):            echo "<th colspan='".$colpsan."'>".$value."</th>";        endforeach;             echo "</theader>";        echo "<tbody>";		$row_counter = 0;		$req_found = false;		foreach ($xml->children() as $child)		{			$children_name = $child->getName();			switch ($children_name){				case "req_begin":					$data = array('req'=>"-",									'item'=>"-",									'sub_item'=>"-",									'function'=>"-",									'issue'=>"-",									'justification'=>"-",									'upper'=>"-",									'alloc'=>"-",									'body'=>"-",									'status'=>"-",									'safety'=>"-",									'derived'=>"-",									'conform'=>"-",									'verif'=>"-",									'compliance'=>"-",									'justif_type'=>"-",									'assumption'=>"-",									'pr'=>"-",									'additional'=>"-"									);					$data['req'] = preg_replace("/\[(.*)\]/","$1",$child);					$req_found = true;					$first_req_body = true;					$first_req_upper = true;					set_time_limit(0);					$line = $row_counter+9;					break;				case "req_list":					if (($first_req_body)||(!$req_found)){						$data['body'] = "<br/> - ";						$first_req_body = false;					}						else{						$data['body'] .= "<br/> - ";					}					break;				case "req_body":					if ($req_found){						if ($first_req_body){							$data['body'] = $child;							$first_req_body = false;						}							else{							$data['body'] .= $child;						}												foreach ($child->children() as $item){							$children_name = $item->getName();							if ($children_name == "table"){								$data['body'] .= '<table style="background-color:white;overflow:scroll;max-width:20%; max-height:100%">';								// var_dump($table);								foreach ($item->children() as $tr){									$data['body'] .= '<tr class="grey_border">';									foreach ($tr->children() as $tc){										$data['body'] .= "<td>";										$data['body'] .= '<span class="small_font">'.$tc."</span>";										$data['body'] .= "</td>";									}									$data['body'] .= "</tr>";								}								$data['body'] .= "</table>";							}							else if($children_name == "image"){								/* images */								/* found media file*/								$img="";								$image_name = Tool::getMedia($uploadName,$item,&$img);								// echo $img;								preg_match("/media\/(.+\..+)$/",$image_name,$filename_array);								$filename = isset($filename_array[1])?$filename_array[1]:"";								//if (file_exists($filename)){								file_put_contents("../result/".$filename, $img);								//}								if (preg_match("/.+\.[e|w]mf$/",$image_name)){									$image_png = Tool::convertEmfToPng($filename);									if ($image_png !== false){										$data['body'] .= '<img src="../../result/'.$image_png.'" title="'.$image_name.'">';									}									else{										$data['body'] .= '<img src="'.Atomik::asset('assets/images/error.png').'" title="'.$image_name.'">';									}								}								else{									$data['body'] .= '<img style="max-width:100%; max-height:100%" src="../../result/'.$filename.'" title="'.$image_name.'">';									// var_dump($filename_array);									// exit();								}							}						}					}					break;									case "req_refer":					if ($first_req_upper){						$data['upper'] = Tool::getTag("Refers to:",$child);						$first_req_upper = false;					}					else{						$data['upper'] .= "<br/>".$child;					}										break;				case "req_status":					$data['status'] = Tool::getTag("Status:",$child);					break;				case "req_safety":					$data['safety'] = Tool::getTag("Safety:",$child);					break;				case "req_derived":					$data['derived'] = Tool::getTag("Derived:",$child);					break;									case "req_alloc":					$data['alloc'] = Tool::getTag("Allocation:",$child);					$data['alloc'] = Tool::splitTag($data['alloc']);					break;				case "req_conformity":					$data['conform'] = Tool::getTag("Conformity:",$child);					break;				case "req_verif":					$data['verif'] = Tool::getTag("Verification Means:",$child);					break;				case "req_rationale":					$data['justification'] = Tool::getTag("Rationale:",$child);					break;				case "req_compliance":					$data['compliance'] = Tool::getTag("Mean Of Compliance:",$child);					$data['compliance'] = Tool::splitTag($data['compliance']);					break;				case "req_justif_type":					$data['justif_type'] = Tool::getTag("Justification Type:",$child);					break;				case "req_assumption":					$data['assumption'] = Tool::getTag("Assumption:",$child);					break;				case "req_pr":					$data['pr'] = Tool::getTag("Problem Report:",$child);					break;									case "req_issue":					$data['issue'] = Tool::getTag("Issue:",$child);					break;				case "req_additional":					$data['additional'] = Tool::getTag("Additional Information:",$child);					break;									case "req_end":					$row_counter++;					$req_found = false;					//var_dump($xml->req_body);					$color = ($row_counter % 2 == 0)? "rouge" : "vert";					echo "<tr class='grey_border ".$color."'>";							$colspan = reset($header_fields);					$colspan = current($header_fields);					echo "<td colspan='".$colspan."'>".$row_counter."</td>";					foreach ($data as $key => $val) {						$color = Tool::checkValidity($key,&$val,$data['justification']);						$colspan = next($header_fields);						echo "<td class='".$color."' colspan='".$colspan."'>".$val."</td>";					}						display(&$objPHPExcel,							&$data,							$line,							$style_white_line_prr);							/*					ob_start("manage_log");					$text = "Requirement ".$data['req']." treated.\n";					echo $text;					ob_end_clean();					*/					array_splice($data, 0, count($data));										// unset($data);					if($row_counter > 10)break(2);					// Atomik::noRender();					break;									}		}	        echo "</tbody>";        echo "</table>";    }    		else {		echo "Unknown specification type";		$text = Tool::read_openxml($uploadName,"DocX2Html.xslt");		Atomik::set('display',$html);		Atomik::setView("export/display_hpr");	}		/* border inside */	$objPHPExcel->getActiveSheet()->getStyle('A9:S'.$line)->getBorders()->getInside()->setBorderStyle(PHPExcel_Style_Border::BORDER_THIN);	/* Apply an autofilter to a range of cells */	$objPHPExcel->getActiveSheet()->setAutoFilter('A8:S8');	$objPHPExcel->getActiveSheet()->getComment('H8')->getText()->createTextRun('Is the requirement complete, correct, unambiguous, simple and self-coherent ?');	$objPHPExcel->getActiveSheet()->getComment('I8')->getText()->createTextRun('Is the requirement stating “what” (as opposed to “how”) unless justified ?');	$objPHPExcel->getActiveSheet()->getComment('J8')->getText()->createTextRun('Is the requirement traceable to an identifiable source :');	$objPHPExcel->getActiveSheet()->getComment('J8')->getText()->createTextRun('\r\n');	$objPHPExcel->getActiveSheet()->getComment('J8')->getText()->createTextRun('- upper requirement if requirement is refined');	$objPHPExcel->getActiveSheet()->getComment('J8')->getText()->createTextRun('- a mandatory rationale or justification if requirement is derived');	$objPHPExcel->getActiveSheet()->getComment('K8')->getText()->createTextRun('Is the requirement conflicting with upper requirement(s) ?');	$objPHPExcel->getActiveSheet()->getComment('L8')->getText()->createTextRun('Is the requirement feasible ?');	$objPHPExcel->getActiveSheet()->getComment('M8')->getText()->createTextRun('Is  the requirement redundant or conflicting with any other requirement in the present document ?');	$objPHPExcel->getActiveSheet()->getComment('N8')->getText()->createTextRun('Can the requirement be verified ?');	$objPHPExcel->getActiveSheet()->getComment('O8')->getText()->createTextRun('Is the requirement consistent with high level safety requirements ?');	/* count requirerments */	//$objPHPExcel->getActiveSheet()->setCellValue('B14','=NBVAL(A,A)');	$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');	$filename = "Traca_{$today_date}.xlsx";	$objWriter->save('../result/'.$filename);								 }       Atomik::set('css_add',"no_show");            Atomik::set('css_reset',"no_show");Atomik::set('css_page','no_show');	Atomik::set('css_page_previous','no_show');	Atomik::set('css_page_next','no_show');